
services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: airline_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: airline_management
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init-postgres.sql:/docker-entrypoint-initdb.d/01-init.sql
      - ./database/auth-schema.sql:/docker-entrypoint-initdb.d/02-auth-schema.sql
      - ./database/triggers.sql:/docker-entrypoint-initdb.d/03-triggers.sql
      - ./database/seed-postgres.sql:/docker-entrypoint-initdb.d/04-seed.sql
    networks:
      - airline-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d airline_management"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend Server
  server:
    build:
      context: ./server
      dockerfile: ../docker/Dockerfile.server
    container_name: airline_server
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=5000
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=airline_management
      - JWT_SECRET=your-super-secret-jwt-key-for-production-min-32-chars
      - JWT_REFRESH_SECRET=your-super-secret-refresh-key-for-production-min-32-chars
      - CLIENT_URL=http://localhost:3000
    ports:
      - "5000:5000"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./server/logs:/app/logs
      - ./server/uploads:/app/uploads
    networks:
      - airline-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Client
  client:
    build:
      context: ./client
      dockerfile: ../docker/Dockerfile.client
    container_name: airline_client
    restart: unless-stopped
    ports:
      - "3000:80"
    depends_on:
      - server
    environment:
      - REACT_APP_API_URL=http://localhost:5000/api
    networks:
      - airline-network

  # Redis (Optional - for caching)
  redis:
    image: redis:7-alpine
    container_name: airline_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - airline-network
    command: redis-server --save 20 1 --loglevel warning

  # Nginx (Optional - for production)
  nginx:
    image: nginx:alpine
    container_name: airline_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - client
      - server
    networks:
      - airline-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  airline-network:
    driver: bridge