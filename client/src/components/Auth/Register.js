import React, { useState } from 'react';
import { useNavigate, Link } from 'react-router-dom';
import authService from '../../services/authService';
import ErrorMessage from '../Common/ErrorMessage';
import { checkPasswordStrength } from '../../utils/crypto';

const Register = () => {
  const [formData, setFormData] = useState({
    username: '',
    email: '',
    password: '',
    confirmPassword: '',
    first_name: '',
    last_name: ''
  });
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [success, setSuccess] = useState(null);
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  const [passwordStrength, setPasswordStrength] = useState(null);

  const navigate = useNavigate();

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–ª—É –ø–∞—Ä–æ–ª—è –ø—Ä–∏ –µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
    if (name === 'password' && value) {
      setPasswordStrength(checkPasswordStrength(value));
    } else if (name === 'password' && !value) {
      setPasswordStrength(null);
    }
    
    // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤–≤–æ–¥–∞
    if (error) setError(null);
  };

  const validateForm = () => {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (!formData.username) {
      setError('–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      return false;
    }
    if (formData.username.length < 3) {
      setError('–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞');
      return false;
    }
    if (!/^[a-zA-Z0-9_]+$/.test(formData.username)) {
      setError('–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è');
      return false;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ email
    if (!formData.email) {
      setError('–í–≤–µ–¥–∏—Ç–µ email');
      return false;
    }
    if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(formData.email)) {
      setError('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å');
      return false;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
    if (!formData.password) {
      setError('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å');
      return false;
    }
    if (formData.password.length < 6) {
      setError('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤');
      return false;
    }
    
    // –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
    const strengthCheck = checkPasswordStrength(formData.password);
    if (strengthCheck.score < 3) {
      setError('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Å—Ç—Ä–æ—á–Ω—É—é –±—É–∫–≤—É, –æ–¥–Ω—É –∑–∞–≥–ª–∞–≤–Ω—É—é –±—É–∫–≤—É –∏ –æ–¥–Ω—É —Ü–∏—Ñ—Ä—É');
      return false;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
    if (!formData.confirmPassword) {
      setError('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å');
      return false;
    }
    if (formData.password !== formData.confirmPassword) {
      setError('–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç');
      return false;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–µ–Ω–∏ –∏ —Ñ–∞–º–∏–ª–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    if (formData.first_name && !/^[–∞-—è—ë\s\-a-z]+$/i.test(formData.first_name)) {
      setError('–ò–º—è –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ—Ñ–∏—Å—ã');
      return false;
    }
    if (formData.last_name && !/^[–∞-—è—ë\s\-a-z]+$/i.test(formData.last_name)) {
      setError('–§–∞–º–∏–ª–∏—è –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ—Ñ–∏—Å—ã');
      return false;
    }

    return true;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!validateForm()) return;

    setLoading(true);
    setError(null);
    setSuccess(null);

    try {
      const registrationData = {
        username: formData.username,
        email: formData.email,
        password: formData.password,
        first_name: formData.first_name || null,
        last_name: formData.last_name || null,
        role_id: 4 // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä–æ–ª—å "analyst"
      };

      await authService.register(registrationData);
      setSuccess('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É.');
      
      // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
      setTimeout(() => {
        navigate('/login');
      }, 2000);
    } catch (err) {
      setError(err.message || '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
    } finally {
      setLoading(false);
    }
  };

  const getPasswordStrengthColor = (strength) => {
    switch (strength) {
      case '–û—á–µ–Ω—å —Å–ª–∞–±—ã–π': return '#dc3545';
      case '–°–ª–∞–±—ã–π': return '#fd7e14';
      case '–°—Ä–µ–¥–Ω–∏–π': return '#ffc107';
      case '–°–∏–ª—å–Ω—ã–π': return '#20c997';
      case '–û—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–π': return '#28a745';
      default: return '#6c757d';
    }
  };

  return (
    <div className="login-page">
      <div className="login-container">
        <div className="login-card">
          <div className="login-header">
            <div className="logo">
              <span className="logo-icon">‚úàÔ∏è</span>
              <h1>AirlineMS</h1>
            </div>
            <p className="login-subtitle">–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ</p>
          </div>

          <form onSubmit={handleSubmit} className="login-form">
            <div className="form-row">
              <div className="form-group">
                <label htmlFor="username">–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è *</label>
                <div className="input-group">
                  <span className="input-icon">üë§</span>
                  <input
                    id="username"
                    type="text"
                    name="username"
                    className="form-control"
                    value={formData.username}
                    onChange={handleChange}
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
                    autoComplete="username"
                    disabled={loading}
                    required
                  />
                </div>
              </div>

              <div className="form-group">
                <label htmlFor="email">Email *</label>
                <div className="input-group">
                  <span className="input-icon">üìß</span>
                  <input
                    id="email"
                    type="email"
                    name="email"
                    className="form-control"
                    value={formData.email}
                    onChange={handleChange}
                    placeholder="–í–≤–µ–¥–∏—Ç–µ email"
                    autoComplete="email"
                    disabled={loading}
                    required
                  />
                </div>
              </div>
            </div>

            <div className="form-row">
              <div className="form-group">
                <label htmlFor="first_name">–ò–º—è</label>
                <div className="input-group">
                  <span className="input-icon">üë®</span>
                  <input
                    id="first_name"
                    type="text"
                    name="first_name"
                    className="form-control"
                    value={formData.first_name}
                    onChange={handleChange}
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è"
                    autoComplete="given-name"
                    disabled={loading}
                  />
                </div>
              </div>

              <div className="form-group">
                <label htmlFor="last_name">–§–∞–º–∏–ª–∏—è</label>
                <div className="input-group">
                  <span className="input-icon">üë®‚Äçüíº</span>
                  <input
                    id="last_name"
                    type="text"
                    name="last_name"
                    className="form-control"
                    value={formData.last_name}
                    onChange={handleChange}
                    placeholder="–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é"
                    autoComplete="family-name"
                    disabled={loading}
                  />
                </div>
              </div>
            </div>

            <div className="form-group">
              <label htmlFor="password">–ü–∞—Ä–æ–ª—å *</label>
              <div className="input-group">
                <span className="input-icon">üîí</span>
                <input
                  id="password"
                  type={showPassword ? 'text' : 'password'}
                  name="password"
                  className="form-control"
                  value={formData.password}
                  onChange={handleChange}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
                  autoComplete="new-password"
                  disabled={loading}
                  required
                />
                <button
                  type="button"
                  className="password-toggle"
                  onClick={() => setShowPassword(!showPassword)}
                  aria-label={showPassword ? '–°–∫—Ä—ã—Ç—å –ø–∞—Ä–æ–ª—å' : '–ü–æ–∫–∞–∑–∞—Ç—å –ø–∞—Ä–æ–ª—å'}
                  disabled={loading}
                >
                  {showPassword ? 'üëÅÔ∏è' : 'üëÅÔ∏è‚Äçüó®Ô∏è'}
                </button>
              </div>
              
              {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–∏–ª—ã –ø–∞—Ä–æ–ª—è */}
              {passwordStrength && (
                <div className="password-strength" style={{ marginTop: '0.5rem' }}>
                  <div className="password-strength-bar">
                    <div 
                      className="password-strength-fill"
                      style={{
                        width: `${passwordStrength.percentage}%`,
                        backgroundColor: getPasswordStrengthColor(passwordStrength.strength),
                        height: '4px',
                        borderRadius: '2px',
                        transition: 'all 0.3s ease'
                      }}
                    />
                  </div>
                  <small style={{ color: getPasswordStrengthColor(passwordStrength.strength) }}>
                    –°–∏–ª–∞ –ø–∞—Ä–æ–ª—è: {passwordStrength.strength}
                  </small>
                </div>
              )}
              
              <small className="form-text">
                –ú–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤, –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±—É–∫–≤—ã —Ä–∞–∑–Ω–æ–≥–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞ –∏ —Ü–∏—Ñ—Ä—ã
              </small>
            </div>

            <div className="form-group">
              <label htmlFor="confirmPassword">–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å *</label>
              <div className="input-group">
                <span className="input-icon">üîí</span>
                <input
                  id="confirmPassword"
                  type={showConfirmPassword ? 'text' : 'password'}
                  name="confirmPassword"
                  className="form-control"
                  value={formData.confirmPassword}
                  onChange={handleChange}
                  placeholder="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
                  autoComplete="new-password"
                  disabled={loading}
                  required
                />
                <button
                  type="button"
                  className="password-toggle"
                  onClick={() => setShowConfirmPassword(!showConfirmPassword)}
                  aria-label={showConfirmPassword ? '–°–∫—Ä—ã—Ç—å –ø–∞—Ä–æ–ª—å' : '–ü–æ–∫–∞–∑–∞—Ç—å –ø–∞—Ä–æ–ª—å'}
                  disabled={loading}
                >
                  {showConfirmPassword ? 'üëÅÔ∏è' : 'üëÅÔ∏è‚Äçüó®Ô∏è'}
                </button>
              </div>
            </div>

            {error && <ErrorMessage message={error} type="danger" />}
            {success && <ErrorMessage message={success} type="success" />}

            <button
              type="submit"
              className="btn btn-primary login-btn"
              disabled={loading}
              aria-label="–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"
            >
              {loading ? (
                <>
                  <span className="spinner"></span>
                  –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è...
                </>
              ) : (
                <>
                  üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
                </>
              )}
            </button>
          </form>

          <div className="login-footer">
            <p>
              –£–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç? <Link to="/login">–í–æ–π—Ç–∏</Link>
            </p>
            <p className="version-info">
              –í–µ—Ä—Å–∏—è 1.0.0 | ¬© 2025 –ú–ò–†–≠–ê –†–¢–£
            </p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Register;