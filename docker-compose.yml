version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:14-alpine
    container_name: airline_postgres
    environment:
      POSTGRES_DB: airline_management
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init-postgres.sql:/docker-entrypoint-initdb.d/01-init.sql
      - ./database/auth-schema.sql:/docker-entrypoint-initdb.d/02-auth.sql
      - ./database/triggers.sql:/docker-entrypoint-initdb.d/03-triggers.sql
      - ./database/seed-postgres.sql:/docker-entrypoint-initdb.d/04-seed.sql
    ports:
      - "5432:5432"
    networks:
      - airline_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d airline_management"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Backend Server
  server:
    build:
      context: ./server
      dockerfile: ../docker/Dockerfile.server
    container_name: airline_server
    environment:
      NODE_ENV: production
      PORT: 5000
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: airline_management
      JWT_SECRET: super-secret-jwt-key-change-in-production-min-32-chars
      JWT_REFRESH_SECRET: super-secret-refresh-key-change-in-production-min-32-chars
      JWT_ACCESS_EXPIRY: 15m
      JWT_REFRESH_EXPIRY: 7d
      BCRYPT_ROUNDS: 12
      MAX_LOGIN_ATTEMPTS: 5
      LOCKOUT_DURATION: 30
      RATE_LIMIT_WINDOW: 900000
      RATE_LIMIT_MAX: 100
      CLIENT_URL: http://localhost:3000
      LOG_LEVEL: info
      ENABLE_SWAGGER: true
    volumes:
      - ./server/logs:/app/logs
      - ./server/uploads:/app/uploads
    ports:
      - "5000:5000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - airline_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend Client
  client:
    build:
      context: ./client
      dockerfile: ../docker/Dockerfile.client
    container_name: airline_client
    environment:
      REACT_APP_API_URL: http://localhost:5000/api
    ports:
      - "3000:80"
    depends_on:
      server:
        condition: service_healthy
    networks:
      - airline_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Redis (optional, for caching)
  redis:
    image: redis:7-alpine
    container_name: airline_redis
    command: redis-server --appendonly yes --requirepass redis_password
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - airline_network
    profiles:
      - cache
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # nginx (reverse proxy, в продакшене)
  nginx:
    image: nginx:alpine
    container_name: airline_nginx
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/ssl:/etc/nginx/ssl:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - client
      - server
    networks:
      - airline_network
    profiles:
      - production
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # pgAdmin (для управления базой данных)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: airline_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: pgadmin
      PGADMIN_CONFIG_SERVER_MODE: "False"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - "8080:80"
    depends_on:
      - postgres
    networks:
      - airline_network
    profiles:
      - admin
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/login"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Мониторинг (Prometheus + Grafana)
  prometheus:
    image: prom/prometheus:latest
    container_name: airline_prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - airline_network
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: airline_grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=grafana
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./docker/grafana/dashboards:/var/lib/grafana/dashboards:ro
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    networks:
      - airline_network
    profiles:
      - monitoring

  # Log management (ELK Stack)
  elasticsearch:
    image: elasticsearch:8.11.0
    container_name: airline_elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - airline_network
    profiles:
      - logging

  logstash:
    image: logstash:8.11.0
    container_name: airline_logstash
    volumes:
      - ./docker/logstash/pipeline:/usr/share/logstash/pipeline:ro
      - ./server/logs:/var/log/airline:ro
    ports:
      - "5044:5044"
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    depends_on:
      - elasticsearch
    networks:
      - airline_network
    profiles:
      - logging

  kibana:
    image: kibana:8.11.0
    container_name: airline_kibana
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - airline_network
    profiles:
      - logging

# Networks
networks:
  airline_network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16

# Volumes
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local

# Labels for better organization
x-labels: &labels
  project: "airline-management-system"
  environment: "${ENV:-development}"
  version: "1.0.0"